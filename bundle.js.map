{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://Battleship/./src/modules/ship.js","webpack://Battleship/./src/modules/player.js","webpack://Battleship/./src/modules/game.js","webpack://Battleship/./src/modules/view.js","webpack://Battleship/./src/modules/board.js","webpack://Battleship/./src/modules/controller.js","webpack://Battleship/webpack/bootstrap","webpack://Battleship/webpack/runtime/global","webpack://Battleship/webpack/runtime/make namespace object","webpack://Battleship/webpack/runtime/publicPath","webpack://Battleship/./src/index.js"],"sourcesContent":["/**\n * Ship Configuration and Management\n * Defines standard naval vessel types with their corresponding lengths\n */\n\n// Standard battleship fleet composition with historical ship sizes\nconst shipSizes = {\n  Carrier: 5,\n  Battleship: 4,\n  Destroyer: 3,\n  Submarine: 3,\n  Cruiser: 2,\n};\n\n/**\n * Represents a naval ship in the battleship game\n * Tracks ship state including damage, position, and orientation\n */\nclass Ship {\n  /**\n   * Creates a new ship instance\n   * @param {string} name - The ship type name (must match shipSizes keys)\n   */\n  constructor(name) {\n    this.name = name;\n    this.length = shipSizes[this.name];\n    this.hitCount = 0;\n    this.head = null; // Starting position coordinates {row, column}\n    this.direction = null; // 'horizontal' or 'vertical'\n  }\n\n  /**\n   * Registers a hit on this ship\n   * Only increments hit count if ship is not already sunk\n   */\n  hit() {\n    if (!this.isSunk()) this.hitCount++;\n  }\n\n  /**\n   * Determines if the ship has been completely destroyed\n   * @returns {boolean} True if all ship segments have been hit\n   */\n  isSunk() {\n    return this.hitCount === this.length;\n  }\n}\n\nmodule.exports = Ship;\n","/**\n * Player Management and AI Intelligence System\n * Handles human and computer players with advanced AI targeting algorithms\n * Implements hunt/target behavior patterns for strategic gameplay\n */\n\nconst Ship = require('./ship');\nconst Board = require('./board');\n\nclass Player {\n  /**\n   * Creates a new player instance (human or AI)\n   * @param {string} name - Player name (empty string defaults to Computer)\n   * @param {Ship[]} ships - Fleet of ships for this player\n   * @param {Board} board - Game board instance\n   */\n  constructor(name = '', ships, board) {\n    this.type = name === '' ? 'Computer' : 'Human';\n    this.name = name || 'Computer';\n    this.fleet = ships;\n    this.board = board;\n\n    // AI strategic targeting system\n    this.aiState = {\n      mode: 'hunt', // 'hunt' (random) or 'target' (adjacent to hit)\n      lastHit: null, // Coordinates of most recent successful hit\n      targetQueue: [], // Priority queue of positions to attack\n      hitShips: [], // Track hits on current target ship\n      allHits: [], // Complete attack history for analysis\n      knownWater: new Set(), // Cells confirmed to be empty (ship spacing)\n    };\n\n    this.lastAttack = null; // Track most recent attack coordinates\n  }\n\n  /**\n   * Executes a basic attack on an enemy player\n   * @param {Player} enemy - Target player to attack\n   * @param {number} row - Target row coordinate\n   * @param {number} column - Target column coordinate\n   * @returns {Ship|string|boolean} Attack result from board\n   */\n  attack(enemy, row, column) {\n    return enemy.board.receiveAttack(row, column);\n  }\n\n  /**\n   * Executes an intelligent AI attack using hunt/target strategy\n   * Employs sophisticated targeting algorithms for optimal ship destruction\n   * @param {Player} enemy - Target player to attack\n   * @returns {Ship|string|boolean} Attack result from board\n   */\n  AIAttack(enemy) {\n    let row, column;\n    let attempts = 0;\n    const maxAttempts = 100;\n\n    // Target mode: Focus on areas adjacent to known hits\n    if (this.aiState.mode === 'target' && this.aiState.targetQueue.length > 0) {\n      let validTargetFound = false;\n\n      while (this.aiState.targetQueue.length > 0 && !validTargetFound && attempts < maxAttempts) {\n        const target = this.aiState.targetQueue.shift();\n        row = target.row;\n        column = target.column;\n        attempts++;\n\n        // Validate target using board utility function\n        if (\n          enemy.board.isValidCoordinate(row, column) &&\n          !enemy.board.isAttackedBefore(row, column)\n        ) {\n          validTargetFound = true;\n        }\n      }\n\n      // Switch to hunt mode if no valid targets remain\n      if (!validTargetFound) {\n        this.aiState.mode = 'hunt';\n        this.aiState.targetQueue = [];\n        this.aiState.hitShips = [];\n      }\n    }\n\n    // Hunt mode: Random targeting with strategic cell avoidance\n    if (this.aiState.mode === 'hunt' || row === undefined || column === undefined) {\n      let isValidTarget = false;\n\n      do {\n        row = Math.floor(Math.random() * enemy.board.size);\n        column = Math.floor(Math.random() * enemy.board.size);\n        attempts++;\n\n        const cellKey = `${row},${column}`;\n        const isKnownWater = this.aiState.knownWater.has(cellKey);\n        const isAlreadyAttacked = enemy.board.isAttackedBefore(row, column);\n\n        isValidTarget = !isAlreadyAttacked && !isKnownWater;\n      } while (!isValidTarget && attempts < maxAttempts);\n    }\n\n    this.lastAttack = { row, column };\n    const result = enemy.board.receiveAttack(row, column);\n\n    // Update AI targeting strategy based on attack outcome\n    this.processAttackResult(result, row, column, enemy);\n\n    return result;\n  }\n\n  /**\n   * Analyzes attack results and updates AI targeting strategy\n   * Manages hunt/target mode transitions and target queue optimization\n   * @param {Ship|string} result - Attack result (Ship object, 'miss', or false)\n   * @param {number} row - Attack row coordinate\n   * @param {number} column - Attack column coordinate\n   * @param {Player} enemy - Enemy player reference for board access\n   */\n  processAttackResult(result, row, column, enemy) {\n    // Track attack history for strategic analysis\n    this.aiState.allHits.push({ row, column, result: result === 'miss' ? 'miss' : 'hit' });\n\n    if (result && result !== 'miss') {\n      // Successful hit - update targeting data\n      this.aiState.lastHit = { row, column };\n      this.aiState.hitShips.push({ row, column });\n\n      // Check if ship is completely destroyed\n      if (result.isSunk && result.isSunk()) {\n        // Mark surrounding area as water to optimize future targeting\n        this.markSurroundingCellsAsWater(result, enemy.board);\n        this.aiState.hitShips = [];\n\n        // Return to hunt mode if no targets queued\n        if (this.aiState.targetQueue.length === 0) {\n          this.aiState.mode = 'hunt';\n        }\n      } else {\n        // Ship hit but not sunk - enter/continue target mode\n        this.aiState.mode = 'target';\n\n        if (this.aiState.hitShips.length === 1) {\n          // First hit on ship - target orthogonal neighbors\n          this.addOrthogonalTargets(row, column, enemy.board);\n        } else if (this.aiState.hitShips.length >= 2) {\n          // Multiple hits - determine ship orientation and target endpoints\n          this.targetAlongShipLine(enemy.board);\n        }\n      }\n    }\n  }\n\n  /**\n   * Adds orthogonal (non-diagonal) neighboring cells to target queue\n   * Used after first hit on a ship to find remaining segments\n   * @param {number} row - Center row coordinate\n   * @param {number} column - Center column coordinate\n   * @param {Board} board - Board instance for validation\n   */\n  addOrthogonalTargets(row, column, board) {\n    const directions = [\n      { row: -1, column: 0 }, // north\n      { row: 1, column: 0 }, // south\n      { row: 0, column: -1 }, // west\n      { row: 0, column: 1 }, // east\n    ];\n\n    directions.forEach((dir) => {\n      const newRow = row + dir.row;\n      const newColumn = column + dir.column;\n\n      // Validate coordinates using board utility function\n      if (board.isValidCoordinate(newRow, newColumn)) {\n        const alreadyQueued = this.aiState.targetQueue.some(\n          (target) => target.row === newRow && target.column === newColumn\n        );\n\n        if (!alreadyQueued) {\n          this.aiState.targetQueue.push({ row: newRow, column: newColumn });\n        }\n      }\n    });\n  }\n\n  /**\n   * Determines ship orientation and targets endpoints for efficient destruction\n   * Analyzes multiple hits to identify linear ship alignment\n   * @param {Board} board - Board instance for boundary validation\n   */\n  targetAlongShipLine(board) {\n    const hits = this.aiState.hitShips;\n    if (hits.length < 2) return;\n\n    let isHorizontal = false;\n    let isVertical = false;\n\n    // Detect horizontal alignment (same row)\n    const firstRow = hits[0].row;\n    if (hits.every((hit) => hit.row === firstRow)) {\n      isHorizontal = true;\n    }\n    // Detect vertical alignment (same column)\n    else {\n      const firstCol = hits[0].column;\n      if (hits.every((hit) => hit.column === firstCol)) {\n        isVertical = true;\n      }\n    }\n\n    if (isHorizontal || isVertical) {\n      // Clear queue and target ship endpoints only\n      this.aiState.targetQueue = [];\n\n      if (isHorizontal) {\n        const row = firstRow;\n        const minCol = Math.min(...hits.map((h) => h.column));\n        const maxCol = Math.max(...hits.map((h) => h.column));\n\n        // Target both ends of horizontal ship using board validation\n        if (board.isValidCoordinate(row, minCol - 1)) {\n          this.aiState.targetQueue.push({ row: row, column: minCol - 1 });\n        }\n        if (board.isValidCoordinate(row, maxCol + 1)) {\n          this.aiState.targetQueue.push({ row: row, column: maxCol + 1 });\n        }\n      } else if (isVertical) {\n        const column = hits[0].column;\n        const minRow = Math.min(...hits.map((h) => h.row));\n        const maxRow = Math.max(...hits.map((h) => h.row));\n\n        // Target both ends of vertical ship using board validation\n        if (board.isValidCoordinate(minRow - 1, column)) {\n          this.aiState.targetQueue.push({ row: minRow - 1, column: column });\n        }\n        if (board.isValidCoordinate(maxRow + 1, column)) {\n          this.aiState.targetQueue.push({ row: maxRow + 1, column: column });\n        }\n      }\n    }\n  }\n\n  /**\n   * Marks all cells surrounding a sunk ship as known water\n   * Optimizes future targeting by eliminating impossible ship locations\n   * @param {Ship} sunkShip - The destroyed ship object\n   * @param {Board} board - Board instance for validation and utilities\n   */\n  markSurroundingCellsAsWater(sunkShip, board) {\n    // Calculate all cells occupied by the sunk ship using board utility\n    const shipCells = board.getShipCells(\n      sunkShip.head.row,\n      sunkShip.head.column,\n      sunkShip.length,\n      sunkShip.direction\n    );\n\n    // Mark all surrounding cells (8-directional) as water using board utility\n    const waterCells = new Set();\n\n    shipCells.forEach((cell) => {\n      const neighbors = board.getSurroundingCells(cell.row, cell.column);\n      neighbors.forEach((neighbor) => {\n        const cellKey = `${neighbor.row},${neighbor.column}`;\n        waterCells.add(cellKey);\n        this.aiState.knownWater.add(cellKey);\n      });\n    });\n\n    // Remove water cells from target queue to optimize targeting\n    this.aiState.targetQueue = this.aiState.targetQueue.filter((target) => {\n      const targetKey = `${target.row},${target.column}`;\n      return !waterCells.has(targetKey);\n    });\n  }\n\n  /**\n   * Automatically places all ships randomly on the board\n   * Used for AI players to set up their fleet without human input\n   * @returns {boolean} True if all ships placed successfully\n   */\n  placeShipsRandomly() {\n    // Restrict to AI players only\n    if (this.type !== 'Computer') return false;\n\n    this.fleet.forEach((ship) => {\n      let placed = false;\n      let attempts = 0;\n      const maxAttempts = 100;\n\n      while (!placed && attempts < maxAttempts) {\n        // Generate random placement parameters\n        const row = Math.floor(Math.random() * this.board.size);\n        const column = Math.floor(Math.random() * this.board.size);\n        const direction = Math.random() < 0.5 ? 'horizontal' : 'vertical';\n\n        placed = this.board.placeShip(ship, row, column, direction);\n        attempts++;\n      }\n\n      if (!placed) {\n        // Silent failure - ship placement failed after maximum attempts\n        return false;\n      }\n    });\n\n    return true;\n  }\n}\n\nmodule.exports = Player;\n","/**\n * Core Game Logic Controller\n * Manages game state, player turns, victory conditions, and game flow\n * Supports both single-player (vs AI) and multiplayer modes\n */\n\nconst Player = require('./player');\nconst Board = require('./board');\nconst Ship = require('./ship');\n\nclass Game {\n  /**\n   * Creates a new game instance with default settings\n   */\n  constructor() {\n    this.players = [];\n    this.currentPlayerIndex = 0;\n    this.phase = 'setup'; // Game phases: 'setup', 'playing', 'gameOver'\n    this.over = false;\n    this.winner = null;\n    this.againstAI = false;\n    this.boardSize = 10; // Default board dimensions\n  }\n\n  /**\n   * Initializes the game with players and boards\n   * Creates human player and AI/second player based on game mode\n   * @param {string} playerOneName - Name for the human player\n   */\n  setup(playerOneName) {\n    // Initialize human player with fleet and board\n    const humanPlayer = new Player(\n      playerOneName || 'Player',\n      this.createFleet(),\n      this.createBoard(this.boardSize)\n    );\n    humanPlayer.type = 'Human';\n    this.players.push(humanPlayer);\n\n    // Initialize AI or second human player\n    const aiPlayer = new Player('', this.createFleet(), this.createBoard(this.boardSize));\n    aiPlayer.type = 'Computer';\n    this.players.push(aiPlayer);\n\n    // Auto-place AI ships for single-player mode\n    if (this.againstAI && this.players[1].type === 'Computer') {\n      this.players[1].placeShipsRandomly();\n    }\n\n    this.currentPlayerIndex = 0; // Human player starts first\n    this.phase = 'setup';\n  }\n\n  /**\n   * Configures game mode (single-player vs multiplayer)\n   * @param {string} gameType - 'single' for AI opponent, 'multiplayer' for human vs human\n   */\n  setGameType(gameType) {\n    this.againstAI = gameType === 'single' ? true : false;\n  }\n\n  /**\n   * Legacy method for adding players (maintained for compatibility)\n   * @param {string} name - Player name\n   * @param {number} boardSize - Board dimensions\n   */\n  setPlayer(name, boardSize) {\n    this.players.push(new Player(name, this.createFleet(), this.createBoard(boardSize)));\n  }\n\n  /**\n   * Sets the board dimensions for the game\n   * @param {number} boardSize - Square board size (e.g., 10 for 10x10)\n   */\n  setBoardSize(boardSize) {\n    this.boardSize = boardSize;\n  }\n\n  /**\n   * Creates a standard battleship fleet\n   * @returns {Ship[]} Array of ship objects representing the complete fleet\n   */\n  createFleet() {\n    return [\n      new Ship('Carrier'),\n      new Ship('Battleship'),\n      new Ship('Destroyer'),\n      new Ship('Submarine'),\n      new Ship('Cruiser'),\n    ];\n  }\n\n  /**\n   * Creates a new game board with current size settings\n   * @returns {Board} New board instance\n   */\n  createBoard() {\n    return new Board(this.boardSize);\n  }\n\n  /**\n   * Gets the player whose turn it currently is\n   * @returns {Player} Current active player\n   */\n  getCurrentPlayer() {\n    return this.players[this.currentPlayerIndex];\n  }\n\n  /**\n   * Gets the player who is not currently taking their turn\n   * @returns {Player} The opponent of the current player\n   */\n  getOpponent() {\n    return this.players[1 - this.currentPlayerIndex];\n  }\n\n  /**\n   * Alternates the active player turn\n   */\n  switchTurn() {\n    this.currentPlayerIndex = 1 - this.currentPlayerIndex;\n  }\n\n  /**\n   * Transitions game from setup phase to active gameplay\n   * Sets appropriate game state and ensures human player starts\n   */\n  startPlaying() {\n    this.phase = 'playing';\n    this.currentPlayerIndex = 0; // Human player always starts\n  }\n\n  /**\n   * Processes a human player's attack move\n   * Validates move legality and handles turn switching\n   * @param {number} row - Target row coordinate\n   * @param {number} column - Target column coordinate\n   * @returns {Ship|string|boolean} Attack result: Ship if hit, 'miss' if miss, false if invalid\n   */\n  makeMove(row, column) {\n    if (this.phase !== 'playing' || this.over) {\n      return false;\n    }\n\n    const currentPlayer = this.getCurrentPlayer();\n    const opponent = this.getOpponent();\n\n    // Restrict to human player moves only\n    if (currentPlayer.type !== 'Human') {\n      return false;\n    }\n\n    // Prevent duplicate attacks on same coordinate\n    if (opponent.board.isAttackedBefore(row, column)) {\n      return false;\n    }\n\n    const result = currentPlayer.attack(opponent, row, column);\n\n    // Check for victory condition\n    if (opponent.board.allShipsSunk()) {\n      this.over = true;\n      this.winner = currentPlayer;\n      this.phase = 'gameOver';\n      return result;\n    }\n\n    // Turn continues on hit, switches on miss\n    if (result === 'miss') {\n      this.switchTurn();\n    }\n\n    return result;\n  }\n\n  /**\n   * Processes an AI player's attack move with intelligent targeting\n   * @returns {Object|null} Attack result object with position and outcome, or null if invalid\n   */\n  makeAIMove() {\n    if (this.phase !== 'playing' || this.over) {\n      return null;\n    }\n\n    const currentPlayer = this.getCurrentPlayer();\n    const opponent = this.getOpponent();\n\n    // Restrict to AI player moves only\n    if (currentPlayer.type !== 'Computer') {\n      return null;\n    }\n\n    const result = currentPlayer.AIAttack(opponent);\n\n    if (!result) {\n      return null;\n    }\n\n    // Check for victory condition\n    if (opponent.board.allShipsSunk()) {\n      this.over = true;\n      this.winner = currentPlayer;\n      this.phase = 'gameOver';\n      return { result, row: null, column: null, gameOver: true };\n    }\n\n    // Turn continues on hit, switches on miss\n    if (result === 'miss') {\n      this.switchTurn();\n    }\n\n    return {\n      result,\n      row: currentPlayer.lastAttack?.row,\n      column: currentPlayer.lastAttack?.column,\n      gameOver: false,\n    };\n  }\n\n  /**\n   * Legacy method for backward compatibility\n   * @returns {Player} Current active player\n   */\n  turn() {\n    return this.getCurrentPlayer();\n  }\n}\n\nmodule.exports = Game;\n","/**\n * User Interface Management System\n * Handles all DOM manipulation, visual feedback, and user interactions\n * Implements the View component of the MVC pattern for the battleship game\n */\n\nconst cruiser = require('../assets/images/cruiser.svg');\nconst destroyer = require('../assets/images/destroyer.svg');\nconst submarine = require('../assets/images/submarine.svg');\nconst battleship = require('../assets/images/battleship.svg');\nconst carrier = require('../assets/images/carrier.svg');\n\nclass View {\n  /**\n   * Initializes the view with DOM element references and ship image mapping\n   */\n  constructor() {\n    this.forms = {\n      gameType: document.getElementById('game-type-form'),\n      boardSize: document.getElementById('board-size-form'),\n      playerNames: document.getElementById('player-names-form'),\n    };\n    this.gameContainer = document.getElementById('game-container');\n    this.fleetContainer = document.querySelector('.fleet-container');\n    this.fleetElement = document.querySelector('.fleet-container .fleet');\n    this.main = document.querySelector('main');\n    this.players = {\n      playerOne: document.querySelector('#player-one'),\n      playerTwo: document.querySelector('#player-two'),\n    };\n    this.boards = {\n      playerOne: this.players.playerOne.querySelector('.game-board'),\n      playerTwo: this.players.playerTwo.querySelector('.game-board'),\n    };\n    this.names = {\n      playerOne: this.players.playerOne.querySelector('.player-name'),\n      playerTwo: this.players.playerTwo.querySelector('.player-name'),\n    };\n\n    // Welcome dialog elements\n    this.welcomeDialog = document.getElementById('welcome-dialog');\n    this.initializeWelcomeDialog();\n\n    // Turn indicator and notification system\n    this.turnIndicator = document.getElementById('turn-indicator');\n    this.turnText = document.getElementById('turn-text');\n    this.notificationContainer = document.getElementById('notification-container');\n  }\n\n  /**\n   * Initializes welcome dialog functionality and checks for first-time users\n   * Sets up event handlers and manages localStorage for user preferences\n   */\n  initializeWelcomeDialog() {\n    if (!this.welcomeDialog) return;\n\n    // Check if user is visiting for the first time\n    const hasSeenWelcome = localStorage.getItem('battleship-welcome-seen');\n\n    if (!hasSeenWelcome) {\n      this.showWelcomeDialog();\n    }\n\n    // Set up event handlers\n    const closeButton = document.getElementById('close-welcome');\n    const startButton = document.getElementById('start-game');\n    const skipButton = document.getElementById('skip-tutorial');\n\n    if (closeButton) {\n      closeButton.addEventListener('click', () => this.hideWelcomeDialog());\n    }\n\n    if (startButton) {\n      startButton.addEventListener('click', () => {\n        this.hideWelcomeDialog();\n        this.markWelcomeSeen();\n      });\n    }\n\n    if (skipButton) {\n      skipButton.addEventListener('click', () => {\n        this.hideWelcomeDialog();\n        this.markWelcomeSeen();\n      });\n    }\n\n    // Close dialog when clicking outside\n    this.welcomeDialog.addEventListener('click', (event) => {\n      if (event.target === this.welcomeDialog) {\n        this.hideWelcomeDialog();\n        this.markWelcomeSeen();\n      }\n    });\n\n    // Handle escape key\n    document.addEventListener('keydown', (event) => {\n      if (event.key === 'Escape' && !this.welcomeDialog.classList.contains('hidden')) {\n        this.hideWelcomeDialog();\n        this.markWelcomeSeen();\n      }\n    });\n\n    // Set up help button\n    const helpButton = document.getElementById('help-button');\n    if (helpButton) {\n      helpButton.addEventListener('click', () => {\n        this.showWelcomeDialog();\n      });\n    }\n  }\n\n  /**\n   * Shows the welcome dialog with smooth animation\n   */\n  showWelcomeDialog() {\n    if (this.welcomeDialog) {\n      this.welcomeDialog.classList.remove('hidden');\n    }\n  }\n\n  /**\n   * Hides the welcome dialog with smooth animation\n   */\n  hideWelcomeDialog() {\n    if (this.welcomeDialog) {\n      this.welcomeDialog.classList.add('hidden');\n    }\n  }\n\n  /**\n   * Marks that the user has seen the welcome dialog\n   * Stores preference in localStorage to avoid showing again\n   */\n  markWelcomeSeen() {\n    localStorage.setItem('battleship-welcome-seen', 'true');\n  }\n\n  /**\n   * Forces the welcome dialog to show again (useful for testing or help button)\n   */\n  resetWelcomeDialog() {\n    localStorage.removeItem('battleship-welcome-seen');\n    this.showWelcomeDialog();\n  }\n\n  /**\n   * Generates standardized cell ID for DOM elements\n   * @param {string} playerIndex - Player identifier ('One' or 'Two')\n   * @param {number} row - Row coordinate\n   * @param {number} column - Column coordinate\n   * @returns {string} Formatted cell ID\n   */\n  getCellId(playerIndex, row, column) {\n    return `player-${playerIndex.toLowerCase()}-${row},${column}`;\n  }\n\n  /**\n   * Extracts ship direction and size data from DOM element\n   * @param {Element} shipElement - Ship DOM element\n   * @returns {Object} Object containing direction, length, and boardSize\n   */\n  getShipData(shipElement) {\n    return {\n      isHorizontal: shipElement.dataset.direction === 'horizontal',\n      length: Number(shipElement.dataset.length),\n      boardSize: Number(this.boards.playerOne.dataset.size),\n    };\n  }\n\n  /**\n   * Calculates all cells a ship would occupy in the UI\n   * @param {number} row - Starting row coordinate\n   * @param {number} column - Starting column coordinate\n   * @param {number} length - Ship length\n   * @param {boolean} isHorizontal - Ship orientation\n   * @param {number} boardSize - Board dimensions for boundary checking\n   * @returns {Array} Array of {row, column} objects representing ship cells\n   */\n  getShipCells(row, column, length, isHorizontal, boardSize = null) {\n    const cells = [];\n    for (let i = 0; i < length; i++) {\n      const cellRow = isHorizontal ? row : row + i;\n      const cellCol = isHorizontal ? column + i : column;\n\n      // Only add cells within bounds if boardSize is provided\n      if (\n        !boardSize ||\n        (cellRow >= 0 && cellRow < boardSize && cellCol >= 0 && cellCol < boardSize)\n      ) {\n        cells.push({ row: cellRow, column: cellCol });\n      }\n    }\n    return cells;\n  }\n\n  /**\n   * Validates if coordinates are within board boundaries\n   * @param {number} row - Row coordinate\n   * @param {number} column - Column coordinate\n   * @param {number} boardSize - Board dimensions\n   * @returns {boolean} True if coordinates are valid\n   */\n  isValidCoordinate(row, column, boardSize) {\n    return row >= 0 && row < boardSize && column >= 0 && column < boardSize;\n  }\n\n  /**\n   * Applies or removes CSS class to ship cells\n   * @param {number} row - Starting row coordinate\n   * @param {number} column - Starting column coordinate\n   * @param {Element} shipElement - Ship DOM element\n   * @param {string} className - CSS class to apply/remove\n   * @param {boolean} add - True to add class, false to remove\n   */\n  modifyShipCells(row, column, shipElement, className, add = true) {\n    const { isHorizontal, length, boardSize } = this.getShipData(shipElement);\n    const cells = this.getShipCells(row, column, length, isHorizontal, boardSize);\n\n    cells.forEach((cell) => {\n      const cellElement = document.getElementById(this.getCellId('One', cell.row, cell.column));\n      if (cellElement) {\n        if (add) {\n          cellElement.classList.add(className);\n        } else {\n          cellElement.classList.remove(className);\n        }\n      }\n    });\n  }\n\n  /**\n   * Legacy method for form event handling (maintained for compatibility)\n   * @param {Function} gameTypeCallback - Game type selection handler\n   * @param {Function} boardSizeCallback - Board size selection handler\n   * @param {Function} playerNamesCallback - Player names configuration handler\n   */\n  handleFormEvents(gameTypeCallback, boardSizeCallback, playerNamesCallback) {\n    this.createFormHandlers(gameTypeCallback, boardSizeCallback, playerNamesCallback);\n  }\n\n  /**\n   * Sets up form submission handlers for game configuration\n   * Manages progressive form display and data collection\n   * @param {Function} gameTypeCallback - Handler for game type selection\n   * @param {Function} boardSizeCallback - Handler for board size selection\n   * @param {Function} playerNamesCallback - Handler for player names input\n   */\n  createFormHandlers(gameTypeCallback, boardSizeCallback, playerNamesCallback) {\n    let gameType;\n    let boardSize;\n    let playerOneName;\n\n    this.forms.gameType.addEventListener('submit', (event) => {\n      event.preventDefault();\n\n      this.forms.gameType.classList.toggle('hidden');\n      this.forms.boardSize.classList.toggle('hidden');\n\n      gameType = this.forms.gameType.elements['game-type'].value;\n      gameTypeCallback(gameType);\n    });\n\n    this.forms.boardSize.addEventListener('submit', (event) => {\n      event.preventDefault();\n\n      this.forms.boardSize.classList.toggle('hidden');\n      this.forms.playerNames.classList.toggle('hidden');\n\n      boardSize = Number(this.forms.boardSize.elements['board-size'].value);\n      boardSizeCallback(boardSize);\n    });\n\n    this.forms.playerNames.addEventListener('submit', (event) => {\n      event.preventDefault();\n\n      this.forms.playerNames.classList.toggle('hidden');\n      this.gameContainer.classList.toggle('hidden');\n      this.fleetContainer.classList.toggle('hidden');\n      this.main.querySelector('.change-direction').classList.toggle('hidden');\n\n      playerOneName = this.forms.playerNames.elements['player-one-name'].value;\n      // Since we only support single player mode now, player two is always AI\n      playerNamesCallback(playerOneName, '');\n    });\n  }\n\n  /**\n   * Generates the visual game boards with proper cell identification\n   * Creates interactive grid cells for both player boards\n   * @param {number} boardSize - Dimensions of the square game board\n   * @param {string} playerOneName - Display name for first player\n   * @param {string} playerTwoName - Display name for second player (or AI)\n   */\n  drawGameBoards(boardSize, playerOneName, playerTwoName) {\n    this.names.playerOne.textContent = playerOneName.toUpperCase() || 'PLAYER ONE';\n    this.names.playerTwo.textContent = playerTwoName.toUpperCase() || 'AI';\n\n    this.boards.playerOne.innerHTML = '';\n    this.boards.playerTwo.innerHTML = '';\n    this.boards.playerOne.dataset.size = boardSize;\n    this.boards.playerTwo.dataset.size = boardSize;\n\n    const players = [\n      { board: this.boards.playerOne, prefix: 'player-one' },\n      { board: this.boards.playerTwo, prefix: 'player-two' },\n    ];\n\n    players.forEach(({ board, prefix }) => {\n      for (let i = 0; i < boardSize; i++) {\n        const row = document.createElement('div');\n        row.classList.add('row');\n\n        for (let j = 0; j < boardSize; j++) {\n          const cell = document.createElement('div');\n          cell.classList.add('cell');\n          cell.draggable = false;\n          cell.id = `${prefix}-${i},${j}`;\n          cell.dataset.row = i;\n          cell.dataset.column = j;\n\n          row.appendChild(cell);\n        }\n\n        board.appendChild(row);\n      }\n    });\n  }\n\n  /**\n   * Renders the ship fleet interface for player ship placement\n   * Creates draggable ship elements with visual representations\n   * @param {Ship[]} fleet - Array of ship objects to display\n   */\n  drawFleet(fleet) {\n    this.fleetElement.innerHTML = '';\n    const shipImages = {\n      cruiser: cruiser,\n      destroyer: destroyer,\n      submarine: submarine,\n      battleship: battleship,\n      carrier: carrier,\n    };\n\n    fleet.forEach((ship) => {\n      const shipElement = document.createElement('div');\n      shipElement.classList.add('ship');\n      shipElement.draggable = true;\n      shipElement.dataset.length = ship.length;\n      shipElement.dataset.type = ship.name.toLowerCase();\n      shipElement.dataset.direction = 'horizontal';\n\n      shipElement.innerHTML = `\n        <span class=\"name\">${ship.name.toUpperCase()}</span>\n        <img class=\"view\" width=\"100\" height=\"50\" src=\"${shipImages[ship.name.toLowerCase()]}\" alt=\"${ship.name}\">\n      `;\n\n      this.fleetElement.appendChild(shipElement);\n    });\n  }\n\n  /**\n   * Implements comprehensive drag-and-drop functionality for ship placement\n   * Handles visual feedback, validation, and automatic fleet updates\n   * @param {Player} player - Player object containing fleet and board references\n   */\n  handleDragEvents(player) {\n    const playerShips = player.fleet;\n    const playerBoard = player.board;\n    let draggedShip = null;\n    let dropZone = null;\n\n    this.fleetElement.addEventListener('dragstart', (event) => {\n      const target = event.target.closest('.ship');\n      if (target) {\n        draggedShip = target;\n        draggedShip.classList.add('dragging');\n\n        // Create invisible drag image for custom visual feedback\n        const emptyElement = document.createElement('div');\n        emptyElement.style.opacity = '0';\n        document.body.appendChild(emptyElement);\n\n        event.dataTransfer.setDragImage(emptyElement, 0, 0);\n\n        requestAnimationFrame(() => {\n          document.body.removeChild(emptyElement);\n        });\n      }\n    });\n\n    this.boards.playerOne.addEventListener('dragover', (event) => {\n      event.preventDefault();\n      const cell = document.elementFromPoint(event.clientX, event.clientY);\n      if (cell && cell.classList.contains('cell') && draggedShip) {\n        if (dropZone && dropZone !== cell) {\n          this.clearPosition(dropZone, draggedShip);\n        }\n\n        if (this.isPositionAvailable(cell, draggedShip)) {\n          this.showPosition(cell, draggedShip, 'valid');\n        } else {\n          this.showPosition(cell, draggedShip, 'invalid');\n        }\n        dropZone = cell;\n      }\n    });\n\n    this.boards.playerOne.addEventListener('drop', (event) => {\n      event.preventDefault();\n      const cell = document.elementFromPoint(event.clientX, event.clientY);\n\n      if (cell && cell.classList.contains('cell') && draggedShip) {\n        if (dropZone && dropZone.classList.contains('valid')) {\n          const ship = playerShips.find(\n            (ship) => ship.name.toLowerCase() === draggedShip.dataset.type\n          );\n\n          // Update game logic\n          playerBoard.placeShip(\n            ship,\n            Number(cell.dataset.row),\n            Number(cell.dataset.column),\n            draggedShip.dataset.direction\n          );\n\n          player.fleet.splice(player.fleet.indexOf(ship), 1);\n\n          // Update visual representation using utility function\n          const { isHorizontal, length } = this.getShipData(draggedShip);\n          const cellRow = Number(cell.dataset.row);\n          const cellColumn = Number(cell.dataset.column);\n          const cells = this.getShipCells(cellRow, cellColumn, length, isHorizontal);\n\n          cells.forEach((cell) => {\n            const cellElement = document.getElementById(\n              this.getCellId('One', cell.row, cell.column)\n            );\n            if (cellElement) {\n              cellElement.classList.add('ship-part');\n            }\n          });\n\n          this.fleetElement.removeChild(draggedShip);\n          cell.appendChild(draggedShip);\n\n          if (player.fleet.length === 0) {\n            this.fleetContainer.classList.add('hidden');\n          }\n\n          this.clearPosition(dropZone, draggedShip);\n          draggedShip.classList.remove('dragging');\n          dropZone = null;\n          draggedShip = null;\n        }\n      }\n    });\n\n    this.fleetElement.addEventListener('dragend', (event) => {\n      if (dropZone) {\n        this.clearPosition(dropZone, draggedShip);\n      }\n\n      draggedShip.classList.remove('dragging');\n      draggedShip = null;\n      dropZone = null;\n    });\n  }\n\n  /**\n   * Validates whether a ship can be placed at the specified position\n   * Checks boundary constraints and ship spacing requirements\n   * @param {Element} cell - Target cell DOM element\n   * @param {Element} draggedShip - Ship element being placed\n   * @returns {boolean} True if position is valid for ship placement\n   */\n  isPositionAvailable(cell, draggedShip) {\n    const { isHorizontal, length, boardSize } = this.getShipData(draggedShip);\n    const cellRow = Number(cell.dataset.row);\n    const cellColumn = Number(cell.dataset.column);\n\n    // Validate board boundaries\n    if (\n      !this.isValidCoordinate(cellRow, cellColumn, boardSize) ||\n      (!isHorizontal && cellRow + length > boardSize) ||\n      (isHorizontal && cellColumn + length > boardSize)\n    ) {\n      return false;\n    }\n\n    // Calculate ship cell positions and check for conflicts\n    const shipCells = this.getShipCells(cellRow, cellColumn, length, isHorizontal);\n\n    // Check for occupied cells\n    for (const shipCell of shipCells) {\n      const cellToCheck = document.getElementById(\n        this.getCellId('One', shipCell.row, shipCell.column)\n      );\n      if (cellToCheck && cellToCheck.classList.contains('ship-part')) {\n        return false;\n      }\n    }\n\n    // Enforce ship spacing rules (8-directional)\n    for (const shipCell of shipCells) {\n      for (let deltaRow = -1; deltaRow <= 1; deltaRow++) {\n        for (let deltaCol = -1; deltaCol <= 1; deltaCol++) {\n          if (deltaRow === 0 && deltaCol === 0) continue;\n\n          const checkRow = shipCell.row + deltaRow;\n          const checkCol = shipCell.column + deltaCol;\n\n          if (this.isValidCoordinate(checkRow, checkCol, boardSize)) {\n            const cellToCheck = document.getElementById(this.getCellId('One', checkRow, checkCol));\n            if (cellToCheck && cellToCheck.classList.contains('ship-part')) {\n              return false;\n            }\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Displays visual preview of ship placement during drag operations\n   * @param {Element} cell - Target cell for ship placement\n   * @param {Element} draggedShip - Ship being dragged\n   * @param {string} className - CSS class for visual feedback ('valid' or 'invalid')\n   */\n  showPosition(cell, draggedShip, className) {\n    const cellRow = Number(cell.dataset.row);\n    const cellColumn = Number(cell.dataset.column);\n    this.modifyShipCells(cellRow, cellColumn, draggedShip, className, true);\n  }\n\n  /**\n   * Removes visual preview indicators from board cells\n   * @param {Element} cell - Base cell for clearing preview\n   * @param {Element} draggedShip - Ship element being dragged\n   */\n  clearPosition(cell, draggedShip) {\n    const cellRow = Number(cell.dataset.row);\n    const cellColumn = Number(cell.dataset.column);\n    this.modifyShipCells(cellRow, cellColumn, draggedShip, 'valid', false);\n    this.modifyShipCells(cellRow, cellColumn, draggedShip, 'invalid', false);\n  }\n\n  /**\n   * Sets up ship rotation control functionality\n   */\n  handleRotation() {\n    const directionButton = this.main.querySelector('.change-direction');\n    directionButton.addEventListener('click', () => {\n      this.changeDirection(directionButton);\n    });\n  }\n\n  /**\n   * Toggles ship orientation between horizontal and vertical\n   * Updates all available ships and UI indicators\n   * @param {Element} directionButton - Rotation button element\n   */\n  changeDirection(directionButton) {\n    const ships = this.fleetElement.querySelectorAll('.ship');\n    const direction = directionButton.querySelector('.direction-icon').dataset.direction;\n\n    if (direction === 'horizontal') {\n      directionButton.querySelector('.direction-icon').dataset.direction = 'vertical';\n      directionButton.querySelector('.direction-text').textContent = 'Vertical';\n    } else {\n      directionButton.querySelector('.direction-icon').dataset.direction = 'horizontal';\n      directionButton.querySelector('.direction-text').textContent = 'Horizontal';\n    }\n\n    ships.forEach((ship) => {\n      ship.dataset.direction = directionButton.querySelector('.direction-icon').dataset.direction;\n    });\n  }\n\n  /**\n   * Sets up click event handling for enemy board attacks\n   * @param {Function} playTurnCallback - Handler function for processing attacks\n   */\n  handleAttackEvents(playTurnCallback) {\n    this.boards.playerTwo.addEventListener('click', (event) => {\n      const cell = event.target.closest('.cell');\n      if (cell) {\n        playTurnCallback(Number(cell.dataset.row), Number(cell.dataset.column));\n      }\n    });\n  }\n\n  /**\n   * Renders visual feedback for attack results on game boards\n   * @param {string} playerIndex - Target board ('One' or 'Two')\n   * @param {Ship|string} result - Attack result (Ship object for hit, 'miss' for miss)\n   * @param {number} row - Target row coordinate\n   * @param {number} column - Target column coordinate\n   */\n  renderShot(playerIndex, result, row, column) {\n    const cell = document.getElementById(this.getCellId(playerIndex, row, column));\n\n    if (!cell) {\n      return; // Silent failure - cell not found\n    }\n\n    // Clear previous shot indicators\n    cell.classList.remove('miss', 'hit', 'shot');\n\n    // Apply appropriate visual feedback\n    if (result === 'miss') {\n      cell.classList.add('miss');\n    } else {\n      cell.classList.add('hit');\n    }\n    cell.classList.add('shot');\n  }\n\n  /**\n   * Displays warning messages for invalid actions\n   * @param {string} message - Warning message to display\n   */\n  renderWarning(message = 'Invalid move!') {\n    this.showNotification(message, 'warning', 2000);\n  }\n\n  /**\n   * Renders visual indication of destroyed ships with detailed graphics\n   * @param {Ship} ship - Destroyed ship object\n   * @param {string} playerIndex - Target board ('One' or 'Two')\n   */\n  renderSunkShip(ship, playerIndex) {\n    const row = ship.head.row;\n    const column = ship.head.column;\n\n    const shipImages = {\n      cruiser: cruiser,\n      destroyer: destroyer,\n      submarine: submarine,\n      battleship: battleship,\n      carrier: carrier,\n    };\n\n    // Calculate ship cells and mark as sunk\n    const isHorizontal = ship.direction === 'horizontal';\n    const cells = this.getShipCells(row, column, ship.length, isHorizontal);\n\n    cells.forEach((cell, index) => {\n      const cellElement = document.getElementById(\n        this.getCellId(playerIndex, cell.row, cell.column)\n      );\n\n      if (cellElement) {\n        cellElement.classList.add('sunk');\n        cellElement.classList.add('ship-part');\n\n        // Add ship visualization to head segment\n        if (index === 0) {\n          cellElement.innerHTML = '';\n\n          const shipElement = document.createElement('div');\n          shipElement.classList.add('ship', 'sunk-ship');\n          shipElement.dataset.length = ship.length;\n          shipElement.dataset.type = ship.name.toLowerCase();\n          shipElement.dataset.direction = ship.direction;\n\n          shipElement.innerHTML = `\n            <span class=\"name\">${ship.name.toUpperCase()}</span>\n            <img class=\"view\" width=\"100\" height=\"50\" src=\"${shipImages[ship.name.toLowerCase()]}\" alt=\"${ship.name}\">\n          `;\n\n          cellElement.appendChild(shipElement);\n        }\n      } else {\n        // Silent failure - cell not found\n      }\n    });\n  }\n\n  /**\n   * Displays game over screen with winner announcement and restart option\n   * @param {Player} winner - Winning player object\n   */\n  showGameOver(winner) {\n    this.main.innerHTML = '';\n    const gameOverMessage = document.createElement('div');\n    gameOverMessage.classList.add('game-over');\n    gameOverMessage.innerHTML = `\n      <h2>Game Over!</h2>\n      <p>${winner.name} wins!</p>\n      <button onclick=\"location.reload()\">Play Again</button>\n    `;\n    this.main.appendChild(gameOverMessage);\n  }\n\n  /**\n   * Shows the turn indicator with player information\n   * @param {string} playerName - Name of the current player\n   * @param {boolean} isAI - Whether the current player is AI\n   */\n  showTurnIndicator(playerName, isAI = false) {\n    if (!this.turnIndicator || !this.turnText) return;\n\n    this.turnText.textContent = isAI ? 'AI Thinking...' : `${playerName}'s Turn`;\n\n    if (isAI) {\n      this.turnIndicator.classList.add('ai-turn');\n    } else {\n      this.turnIndicator.classList.remove('ai-turn');\n    }\n\n    this.turnIndicator.classList.remove('hidden');\n  }\n\n  /**\n   * Hides the turn indicator\n   */\n  hideTurnIndicator() {\n    if (this.turnIndicator) {\n      this.turnIndicator.classList.add('hidden');\n    }\n  }\n\n  /**\n   * Shows a notification to the user\n   * @param {string} message - The notification message\n   * @param {string} type - Notification type ('success', 'info', 'warning', 'error')\n   * @param {number} duration - Auto-hide duration in milliseconds (0 = manual close)\n   */\n  showNotification(message, type = 'info', duration = 3000) {\n    if (!this.notificationContainer) return;\n\n    const notification = document.createElement('div');\n    notification.className = `notification ${type}`;\n\n    const icons = {\n      success: '✅',\n      info: 'ℹ️',\n      warning: '⚠️',\n      error: '❌',\n    };\n\n    notification.innerHTML = `\n      <div class=\"notification-content\">\n        <span class=\"notification-icon\">${icons[type] || icons.info}</span>\n        <span class=\"notification-text\">${message}</span>\n      </div>\n      <button class=\"notification-close\">&times;</button>\n    `;\n\n    // Add close functionality\n    const closeBtn = notification.querySelector('.notification-close');\n    closeBtn.addEventListener('click', () => {\n      this.removeNotification(notification);\n    });\n\n    this.notificationContainer.appendChild(notification);\n\n    // Trigger show animation\n    setTimeout(() => {\n      notification.classList.add('show');\n    }, 10);\n\n    // Auto-hide if duration is set\n    if (duration > 0) {\n      setTimeout(() => {\n        this.removeNotification(notification);\n      }, duration);\n    }\n\n    return notification;\n  }\n\n  /**\n   * Removes a notification with smooth animation\n   * @param {Element} notification - The notification element to remove\n   */\n  removeNotification(notification) {\n    if (!notification) return;\n\n    notification.classList.remove('show');\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.parentNode.removeChild(notification);\n      }\n    }, 700);\n  }\n\n  /**\n   * Clears all notifications\n   */\n  clearNotifications() {\n    if (this.notificationContainer) {\n      this.notificationContainer.innerHTML = '';\n    }\n  }\n}\n\nmodule.exports = View;\n","/**\n * Game Board Management System\n * Handles ship placement, attack processing, and game state tracking\n * Implements standard battleship rules including ship spacing requirements\n */\nclass Board {\n  /**\n   * Creates a new game board with specified dimensions\n   * @param {number} size - Board dimensions (creates size x size grid)\n   */\n  constructor(size) {\n    this.size = size;\n    this.grid = Array.from({ length: this.size }, () => Array(this.size).fill(null));\n    this.ships = [];\n    this.attacks = {\n      hit: new Set(),\n      miss: new Set(),\n    };\n  }\n\n  /**\n   * Validates if coordinates are within board boundaries\n   * @param {number} row - Row coordinate to validate\n   * @param {number} column - Column coordinate to validate\n   * @returns {boolean} True if coordinates are valid\n   */\n  isValidCoordinate(row, column) {\n    return row >= 0 && row < this.size && column >= 0 && column < this.size;\n  }\n\n  /**\n   * Calculates all cells a ship would occupy at given position\n   * @param {number} row - Starting row coordinate\n   * @param {number} column - Starting column coordinate\n   * @param {number} length - Ship length\n   * @param {string} direction - Ship orientation ('horizontal' or 'vertical')\n   * @returns {Array} Array of {row, column} objects representing ship cells\n   */\n  getShipCells(row, column, length, direction) {\n    const cells = [];\n    for (let i = 0; i < length; i++) {\n      if (direction === 'horizontal') {\n        cells.push({ row: row, column: column + i });\n      } else {\n        cells.push({ row: row + i, column: column });\n      }\n    }\n    return cells;\n  }\n\n  /**\n   * Gets all 8-directional neighboring cells for a given position\n   * @param {number} row - Center row coordinate\n   * @param {number} column - Center column coordinate\n   * @returns {Array} Array of {row, column} objects for valid neighbors\n   */\n  getSurroundingCells(row, column) {\n    const neighbors = [];\n    for (let deltaRow = -1; deltaRow <= 1; deltaRow++) {\n      for (let deltaCol = -1; deltaCol <= 1; deltaCol++) {\n        if (deltaRow === 0 && deltaCol === 0) continue;\n\n        const newRow = row + deltaRow;\n        const newCol = column + deltaCol;\n\n        if (this.isValidCoordinate(newRow, newCol)) {\n          neighbors.push({ row: newRow, column: newCol });\n        }\n      }\n    }\n    return neighbors;\n  }\n\n  /**\n   * Attempts to place a ship on the board\n   * Validates placement rules including boundaries and ship spacing\n   * @param {Ship} ship - The ship object to place\n   * @param {number} row - Starting row coordinate\n   * @param {number} column - Starting column coordinate\n   * @param {string} direction - Ship orientation ('horizontal' or 'vertical')\n   * @returns {boolean} True if placement successful, false otherwise\n   */\n  placeShip(ship, row, column, direction) {\n    // Validate placement boundaries and spacing requirements\n    if (\n      !this.isValidCoordinate(row, column) ||\n      (direction === 'vertical' && row + ship.length > this.size) ||\n      (direction === 'horizontal' && column + ship.length > this.size) ||\n      !this.isEmpty(ship, row, column, direction)\n    ) {\n      return false;\n    }\n\n    // Configure ship position and orientation\n    ship.head = { row, column };\n    ship.direction = direction;\n\n    // Place ship segments on the grid\n    const shipCells = this.getShipCells(row, column, ship.length, direction);\n    shipCells.forEach((cell) => {\n      this.grid[cell.row][cell.column] = ship;\n    });\n\n    this.ships.push(ship);\n    return true;\n  }\n\n  /**\n   * Validates ship placement by checking for conflicts and spacing violations\n   * Ensures ships don't overlap and maintain proper spacing (including diagonals)\n   * @param {Ship} ship - The ship to validate placement for\n   * @param {number} row - Starting row coordinate\n   * @param {number} column - Starting column coordinate\n   * @param {string} direction - Ship orientation\n   * @returns {boolean} True if position is valid for placement\n   */\n  isEmpty(ship, row, column, direction) {\n    const shipCells = this.getShipCells(row, column, ship.length, direction);\n\n    // Verify ship cells are unoccupied and within bounds\n    for (const cell of shipCells) {\n      if (\n        !this.isValidCoordinate(cell.row, cell.column) ||\n        this.grid[cell.row][cell.column] !== null\n      ) {\n        return false;\n      }\n    }\n\n    // Enforce ship spacing rules - check all surrounding cells\n    for (const cell of shipCells) {\n      const neighbors = this.getSurroundingCells(cell.row, cell.column);\n      for (const neighbor of neighbors) {\n        if (this.grid[neighbor.row][neighbor.column] !== null) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Processes an attack on the specified coordinates\n   * Handles hit/miss logic and updates attack tracking\n   * @param {number} row - Target row coordinate\n   * @param {number} column - Target column coordinate\n   * @returns {Ship|string|boolean} Ship object if hit, 'miss' if miss, false if invalid\n   */\n  receiveAttack(row, column) {\n    // Validate attack coordinates and prevent duplicate attacks\n    if (!this.isValidCoordinate(row, column) || this.isAttackedBefore(row, column)) {\n      return false;\n    }\n\n    // Process attack and update tracking\n    if (this.grid[row][column]) {\n      this.attacks.hit.add(`${row},${column}`);\n      this.grid[row][column].hit();\n    } else {\n      this.attacks.miss.add(`${row},${column}`);\n    }\n\n    return this.grid[row][column] || 'miss';\n  }\n\n  /**\n   * Checks if a coordinate has been previously attacked\n   * @param {number} row - Row coordinate to check\n   * @param {number} column - Column coordinate to check\n   * @returns {boolean} True if coordinate was previously attacked\n   */\n  isAttackedBefore(row, column) {\n    return this.attacks.hit.has(`${row},${column}`) || this.attacks.miss.has(`${row},${column}`);\n  }\n\n  /**\n   * Determines if all ships on the board have been sunk\n   * Used to check for game victory conditions\n   * @returns {boolean} True if all ships are destroyed\n   */\n  allShipsSunk() {\n    return this.ships.every((ship) => ship.isSunk() === true);\n  }\n}\n\nmodule.exports = Board;\n","/**\n * Main Controller Module - MVC Pattern Implementation\n * Coordinates interactions between game logic and user interface\n * Manages game state transitions and handles both human and AI player actions\n */\n\nconst Game = require('./game');\nconst View = require('./view');\n\nclass Controller {\n  /**\n   * Creates a new controller instance with game and view components\n   */\n  constructor() {\n    this.game = new Game();\n    this.view = new View();\n    this.isWaitingForAI = false; // Prevents overlapping AI moves\n  }\n\n  /**\n   * Processes attack results and updates UI with visual feedback\n   * Handles ship destruction rendering and game over detection\n   * @param {string} targetPlayerIndex - Target board ('One' or 'Two')\n   * @param {Ship|string|boolean} result - Attack result\n   * @param {number} row - Attack row coordinate\n   * @param {number} column - Attack column coordinate\n   * @returns {boolean} True if game continues, false if game over\n   */\n  processAttackResult(targetPlayerIndex, result, row, column) {\n    // Update UI with attack results\n    this.view.renderShot(targetPlayerIndex, result, row, column);\n\n    // Handle ship destruction visual feedback\n    if (result && result !== 'miss' && result.isSunk && result.isSunk()) {\n      this.view.renderSunkShip(result, targetPlayerIndex);\n    }\n\n    // Check for game completion\n    if (this.game.over) {\n      this.view.showGameOver(this.game.winner);\n      return false; // Game ended\n    }\n\n    return true; // Game continues\n  }\n\n  /**\n   * Initializes the user interface with callback handlers\n   * Sets up form handling for game configuration\n   * @param {Function} gameTypeCallback - Handler for game type selection\n   * @param {Function} boardSizeCallback - Handler for board size selection\n   * @param {Function} playerNamesCallback - Handler for player name configuration\n   */\n  setup(gameTypeCallback, boardSizeCallback, playerNamesCallback) {\n    this.view.createFormHandlers(gameTypeCallback, boardSizeCallback, playerNamesCallback);\n  }\n\n  /**\n   * Configures game mode (single-player vs multiplayer)\n   * @param {string} gameType - Selected game type\n   */\n  setGameType(gameType) {\n    this.game.setGameType(gameType);\n  }\n\n  /**\n   * Sets the board dimensions for the game\n   * @param {number} boardSize - Square board size\n   */\n  setBoardSize(boardSize) {\n    this.game.setBoardSize(boardSize);\n  }\n\n  /**\n   * Initializes game with players and sets up ship placement phase\n   * Creates game boards, fleet display, and drag-and-drop functionality\n   * @param {string} playerOneName - Name of the human player\n   * @param {string} playerTwoName - Name of second player (empty for AI)\n   */\n  initializeGame(playerOneName, playerTwoName) {\n    // Initialize game logic with players\n    this.game.setup(playerOneName, playerTwoName);\n\n    // Set up user interface components\n    this.view.drawGameBoards(this.game.boardSize, playerOneName, playerTwoName);\n    this.view.drawFleet(this.game.players[0].fleet);\n    this.view.handleDragEvents(this.game.players[0]);\n    this.view.handleRotation();\n\n    // Show setup notification\n    this.view.showNotification('Drag and drop your ships onto the board to begin!', 'info', 5000);\n\n    this.setupShipPlacementHandler();\n  }\n\n  /**\n   * Configures automatic transition from ship placement to battle phase\n   * Monitors ship placement progress and triggers game start when complete\n   */\n  setupShipPlacementHandler() {\n    const checkShipsPlaced = () => {\n      const remainingShips = this.game.players[0].fleet.length;\n\n      if (remainingShips === 0) {\n        this.view.showNotification('All ships placed! Preparing AI fleet...', 'success', 2000);\n        setTimeout(() => {\n          this.startBattlePhase();\n        }, 1000);\n      } else if (remainingShips <= 2) {\n        this.view.showNotification(\n          `${remainingShips} ship${remainingShips > 1 ? 's' : ''} remaining to place.`,\n          'info',\n          2000\n        );\n      }\n    };\n\n    // Enhanced drag event handling with completion detection\n    const originalHandleDragEvents = this.view.handleDragEvents.bind(this.view);\n    this.view.handleDragEvents = (player) => {\n      originalHandleDragEvents(player);\n\n      const dropHandler = (event) => {\n        setTimeout(() => {\n          checkShipsPlaced();\n        }, 100); // Allow DOM updates to complete\n      };\n\n      this.view.boards.playerOne.addEventListener('drop', dropHandler);\n    };\n\n    this.view.handleDragEvents(this.game.players[0]);\n\n    // Initial check for pre-placed ships\n    setTimeout(() => {\n      checkShipsPlaced();\n    }, 500);\n  }\n\n  /**\n   * Transitions from ship placement to active battle phase\n   * Configures UI for gameplay and sets up attack event handlers\n   */\n  startBattlePhase() {\n    this.game.startPlaying();\n\n    // Update UI for battle phase\n    this.view.fleetContainer.classList.add('hidden');\n    this.view.main.querySelector('.change-direction').classList.add('hidden');\n\n    // Show initial turn indicator\n    const currentPlayer = this.game.getCurrentPlayer();\n    this.view.showTurnIndicator(currentPlayer.name, currentPlayer.type === 'Computer');\n\n    // Show game start notification\n    this.view.showNotification('Battle has begun! Click on enemy cells to attack.', 'info', 4000);\n\n    // Enable attack functionality\n    this.view.handleAttackEvents((row, column) => this.playTurn(row, column));\n  }\n\n  /**\n   * Processes a human player's turn including attack and victory checking\n   * Handles turn validation, UI updates, and AI turn triggering\n   * @param {number} row - Target row coordinate\n   * @param {number} column - Target column coordinate\n   */\n  playTurn(row, column) {\n    // Validate turn preconditions\n    if (this.isWaitingForAI || this.game.over || this.game.phase !== 'playing') {\n      if (this.isWaitingForAI) {\n        this.view.showNotification('Please wait for AI to finish its turn.', 'warning', 2000);\n      }\n      return;\n    }\n\n    const result = this.game.makeMove(row, column);\n\n    if (result === false) {\n      this.view.showNotification(\n        'Invalid move! Cell already attacked or out of bounds.',\n        'warning',\n        2000\n      );\n      return;\n    }\n\n    // Show attack result notification\n    if (result === 'miss') {\n      this.view.showNotification('Miss! Shot landed in water.', 'info', 2000);\n    } else if (result && result !== 'miss') {\n      if (result.isSunk && result.isSunk()) {\n        this.view.showNotification(`Direct hit! ${result.name} destroyed!`, 'success', 3000);\n      } else {\n        this.view.showNotification('Direct hit! Enemy ship damaged.', 'success', 2000);\n      }\n    }\n\n    // Process attack result and check for game over\n    const gameStillActive = this.processAttackResult('Two', result, row, column);\n    if (!gameStillActive) {\n      this.view.hideTurnIndicator();\n      return; // Game ended\n    }\n\n    // Update turn indicator for AI turn\n    if (this.game.againstAI && this.game.getCurrentPlayer().type === 'Computer') {\n      const aiPlayer = this.game.getCurrentPlayer();\n      this.view.showTurnIndicator(aiPlayer.name, true);\n      this.handleAITurn();\n    }\n  }\n\n  /**\n   * Manages AI turn execution with timing delays for better user experience\n   * Handles recursive AI turns on successful hits and victory conditions\n   */\n  handleAITurn() {\n    this.isWaitingForAI = true;\n\n    // Add strategic delay to make AI moves visible\n    setTimeout(() => {\n      const aiResult = this.game.makeAIMove();\n\n      if (aiResult && aiResult.result) {\n        const { result, row, column } = aiResult;\n\n        // Show AI attack notification\n        const cellName = `${String.fromCharCode(65 + row)}${column + 1}`;\n        if (result === 'miss') {\n          this.view.showNotification(`AI attacked ${cellName} - Miss!`, 'info', 2000);\n        } else if (result && result !== 'miss') {\n          if (result.isSunk && result.isSunk()) {\n            this.view.showNotification(\n              `AI attacked ${cellName} - Your ${result.name} was destroyed!`,\n              'error',\n              3000\n            );\n          } else {\n            this.view.showNotification(\n              `AI attacked ${cellName} - Your ship was hit!`,\n              'warning',\n              2000\n            );\n          }\n        }\n\n        // Process attack result and check for game over\n        const gameStillActive = this.processAttackResult('One', result, row, column);\n        if (!gameStillActive) {\n          this.isWaitingForAI = false;\n          this.view.hideTurnIndicator();\n          return; // Game ended\n        }\n\n        // AI continues turn on hit, otherwise return control to human\n        if (result !== 'miss' && this.game.getCurrentPlayer().type === 'Computer') {\n          setTimeout(() => this.handleAITurn(), 1000); // Delay consecutive AI moves\n        } else {\n          this.isWaitingForAI = false;\n          // Update turn indicator back to human player\n          const humanPlayer = this.game.players[0];\n          this.view.showTurnIndicator(humanPlayer.name, false);\n        }\n      } else {\n        this.isWaitingForAI = false;\n        // Update turn indicator back to human player\n        const humanPlayer = this.game.players[0];\n        this.view.showTurnIndicator(humanPlayer.name, false);\n      }\n    }, 500); // AI \"thinking\" delay\n  }\n\n  /**\n   * Legacy method for backward compatibility\n   */\n  handleDragEvents() {\n    this.view.handleDragEvents(this.game);\n  }\n\n  /**\n   * Legacy attack method - redirects to main turn handler\n   * @param {number} row - Target row coordinate\n   * @param {number} column - Target column coordinate\n   */\n  makeAttack(row, column) {\n    this.playTurn(row, column);\n  }\n\n  /**\n   * Checks if the game has ended\n   * @returns {boolean} True if game is over\n   */\n  checkGameOver() {\n    return this.game.over;\n  }\n}\n\nmodule.exports = Controller;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","/**\n * Battleship Game Entry Point\n * Initializes the game controller and sets up callback handlers for game configuration\n */\n\nrequire('./styles/style.css');\nconst Controller = require('./modules/controller');\n\n// Initialize the main game controller\nconst controller = new Controller();\n\n/**\n * Handles game type selection (single player vs multiplayer)\n * @param {string} gameType - The selected game type ('single' or 'multiplayer')\n */\nconst gameTypeCallback = (gameType) => {\n  controller.setGameType(gameType);\n};\n\n/**\n * Handles board size selection\n * @param {number} boardSize - The selected board dimensions (e.g., 10 for 10x10)\n */\nconst boardSizeCallback = (boardSize) => {\n  controller.setBoardSize(boardSize);\n};\n\n/**\n * Handles player name configuration and game initialization\n * @param {string} playerOneName - Name of the first player\n * @param {string} playerTwoName - Name of the second player (empty for AI)\n */\nconst playerNamesCallback = (playerOneName, playerTwoName) => {\n  controller.initializeGame(playerOneName, playerTwoName);\n};\n\n// Configure controller with callback handlers and start the game setup\ncontroller.setup(gameTypeCallback, boardSizeCallback, playerNamesCallback);\n"],"names":["shipSizes","Carrier","Battleship","Destroyer","Submarine","Cruiser","module","exports","constructor","name","this","length","hitCount","head","direction","hit","isSunk","ships","board","type","fleet","aiState","mode","lastHit","targetQueue","hitShips","allHits","knownWater","Set","lastAttack","attack","enemy","row","column","receiveAttack","AIAttack","attempts","validTargetFound","target","shift","isValidCoordinate","isAttackedBefore","undefined","isValidTarget","Math","floor","random","size","cellKey","isKnownWater","has","result","processAttackResult","push","markSurroundingCellsAsWater","addOrthogonalTargets","targetAlongShipLine","forEach","dir","newRow","newColumn","some","hits","isHorizontal","isVertical","firstRow","every","firstCol","minCol","min","map","h","maxCol","max","minRow","maxRow","sunkShip","shipCells","getShipCells","waterCells","cell","getSurroundingCells","neighbor","add","filter","targetKey","placeShipsRandomly","ship","placed","placeShip","Player","Board","Ship","players","currentPlayerIndex","phase","over","winner","againstAI","boardSize","setup","playerOneName","humanPlayer","createFleet","createBoard","aiPlayer","setGameType","gameType","setPlayer","setBoardSize","getCurrentPlayer","getOpponent","switchTurn","startPlaying","makeMove","currentPlayer","opponent","allShipsSunk","makeAIMove","gameOver","turn","cruiser","destroyer","submarine","battleship","carrier","forms","document","getElementById","playerNames","gameContainer","fleetContainer","querySelector","fleetElement","main","playerOne","playerTwo","boards","names","welcomeDialog","initializeWelcomeDialog","turnIndicator","turnText","notificationContainer","localStorage","getItem","showWelcomeDialog","closeButton","startButton","skipButton","addEventListener","hideWelcomeDialog","markWelcomeSeen","event","key","classList","contains","helpButton","remove","setItem","resetWelcomeDialog","removeItem","getCellId","playerIndex","toLowerCase","getShipData","shipElement","dataset","Number","cells","i","cellRow","cellCol","modifyShipCells","className","cellElement","handleFormEvents","gameTypeCallback","boardSizeCallback","playerNamesCallback","createFormHandlers","preventDefault","toggle","elements","value","drawGameBoards","playerTwoName","textContent","toUpperCase","innerHTML","prefix","createElement","j","draggable","id","appendChild","drawFleet","shipImages","handleDragEvents","player","playerShips","playerBoard","draggedShip","dropZone","closest","emptyElement","style","opacity","body","dataTransfer","setDragImage","requestAnimationFrame","removeChild","elementFromPoint","clientX","clientY","clearPosition","isPositionAvailable","showPosition","find","splice","indexOf","cellColumn","shipCell","cellToCheck","deltaRow","deltaCol","checkRow","checkCol","handleRotation","directionButton","changeDirection","querySelectorAll","handleAttackEvents","playTurnCallback","renderShot","renderWarning","message","showNotification","renderSunkShip","index","showGameOver","gameOverMessage","showTurnIndicator","playerName","isAI","hideTurnIndicator","duration","notification","icons","success","info","warning","error","removeNotification","setTimeout","parentNode","clearNotifications","grid","Array","from","fill","attacks","miss","neighbors","newCol","isEmpty","Game","View","game","view","isWaitingForAI","targetPlayerIndex","initializeGame","setupShipPlacementHandler","checkShipsPlaced","remainingShips","startBattlePhase","originalHandleDragEvents","bind","playTurn","handleAITurn","aiResult","cellName","String","fromCharCode","makeAttack","checkGameOver","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","g","globalThis","Function","e","window","r","Symbol","toStringTag","Object","defineProperty","scriptUrl","importScripts","location","currentScript","tagName","src","scripts","getElementsByTagName","test","Error","replace","p","controller"],"sourceRoot":""}